// Generated by CoffeeScript 1.7.1
(function() {
  var AngularModuleDefinition, AngularModuleDependency, AngularParserPlugin, LocalModulesHelpers, ModuleParserHelpers, RequireHeaderDependency;

  LocalModulesHelpers = require("webpack/lib/dependencies/LocalModulesHelpers");

  ModuleParserHelpers = require("webpack/lib/ModuleParserHelpers");

  RequireHeaderDependency = require("webpack/lib/dependencies/RequireHeaderDependency");

  AngularModuleDefinition = require('./AngularModuleDefinition');

  AngularModuleDependency = require('./AngularModuleDependency');

  AngularParserPlugin = (function() {
    function AngularParserPlugin(options) {
      this.options = options;
    }

    AngularParserPlugin.prototype.apply = function(parser) {
      var bindCallbackMethod;
      bindCallbackMethod = function(source, plugname, obj, method) {
        return source.plugin(plugname, method.bind(obj, source));
      };
      return bindCallbackMethod(parser, "call angular.module", this, this.parseModuleCall);
    };

    AngularParserPlugin.prototype.addAngularVariable = function(parser) {
      return ModuleParserHelpers.addParsedVariable(parser, "angular", "require('angular')");
    };

    AngularParserPlugin.prototype.parseModuleCall = function(parser, expr) {
      switch (expr["arguments"].length) {
        case 1:
          return this._parseModuleCallSingleArgument(parser, expr);
        case 2:
          return this._parseModuleCallTwoArgument(parser, expr);
        case 3:
          return this._parseModuleCallThreeArgument(parser, expr);
        default:
          return console.warn("Don't recognise angular.module() with " + expr["arguments"].length + " args");
      }
    };

    AngularParserPlugin.prototype._parseModuleCallSingleArgument = function(parser, expr) {
      var mod;
      mod = parser.evaluateExpression(expr["arguments"][0]);
      return this._addDependency(parser, expr, mod);
    };

    AngularParserPlugin.prototype._parseModuleCallTwoArgument = function(parser, expr) {
      var deps, mod;
      mod = parser.evaluateExpression(expr["arguments"][0]);
      deps = parser.evaluateExpression(expr["arguments"][1]);
      this._addModuleDefinition(parser, expr, mod);
      if (deps.items) {
        return deps.items.every(this._addDependency.bind(this, parser, expr));
      }
      return this._addDependency(parser, expr, mod);
    };

    AngularParserPlugin.prototype._parseModuleCallThreeArgument = function(parser, expr) {
      var deps, mod;
      mod = parser.evaluateExpression(expr["arguments"][0]);
      deps = parser.evaluateExpression(expr["arguments"][1]);
      this._addModuleDefinition(parser, expr, mod);
      return deps.items.every(this._addDependency.bind(this, parser, expr));
    };

    AngularParserPlugin.prototype._addModuleDefinition = function(parser, expr, mod) {
      var dep;
      dep = new AngularModuleDefinition(expr.range, mod.string);
      dep.loc = expr.loc;
      dep.localModule = LocalModulesHelpers.addLocalModule(parser.state, mod.string);
      parser.state.current.addDependency(dep);
      return true;
    };

    AngularParserPlugin.prototype._addDependency = function(parser, expr, param) {
      var dep, localModule;
      if (param.isConditional()) {
        parser.state.current.addDependency(new RequireHeaderDependency(expr.callee.range));
        param.options.forEach(function(param) {
          var result;
          result = parser.applyPluginsBailResult("call require:commonjs:item", expr, param);
          if (result === undefined) {
            throw new Error("Cannot convert options with mixed known and unknown stuff");
          }
        });
        return true;
      }
      if (param.isString()) {
        dep = void 0;
        localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string);
        if (localModule) {
          return true;
        }
        dep = new AngularModuleDependency(param.string, param.range);
        dep.loc = param.loc;
        parser.state.current.addDependency(dep);
        return true;
      }
      parser.applyPluginsBailResult("call require:commonjs:context", expr, param);
      return true;
    };

    return AngularParserPlugin;

  })();

  module.exports = AngularParserPlugin;

}).call(this);
