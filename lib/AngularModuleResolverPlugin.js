// Generated by CoffeeScript 1.7.1
(function() {
  var AngularModuleResolverPlugin, createInnerCallback,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  createInnerCallback = require('./createInnerCallback');

  AngularModuleResolverPlugin = (function() {
    function AngularModuleResolverPlugin(options) {
      this.options = options;
    }

    AngularModuleResolverPlugin.applyDebug = function(resolver) {
      resolver.plugin("file", function(request, callback) {
        console.log("F: " + (JSON.stringify(request)));
        return callback();
      });
      resolver.plugin("directory", function(request, callback) {
        console.log("D: " + (JSON.stringify(request)));
        return callback();
      });
      resolver.plugin("module", function(request, callback) {
        console.log("M: " + (JSON.stringify(request)));
        return callback();
      });
      resolver.plugin("module-module", function(request, callback) {
        console.log("MM: " + (JSON.stringify(request)));
        return callback();
      });
      resolver.plugin("module-loader", function(request, callback) {
        console.log("ML: " + (JSON.stringify(request)));
        return callback();
      });
      resolver.plugin("module-context", function(request, callback) {
        console.log("MC: " + (JSON.stringify(request)));
        return callback();
      });
      resolver.plugin("module-loader-module", function(request, callback) {
        console.log("MLM: " + (JSON.stringify(request)));
        return callback();
      });
      return resolver.plugin("result", function(request, callback) {
        console.log("RESULT: " + (JSON.stringify(request)));
        return callback();
      });
    };

    AngularModuleResolverPlugin.prototype.apply = function(resolver) {
      resolver.plugin("module", function(request, callback) {
        var moduleReqStr, requests, topLevelCallback;
        topLevelCallback = callback;
        requests = [request.request];
        moduleReqStr = request.request.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/^ng(-.+)?$/, "angular$1").toLowerCase();
        if (__indexOf.call(requests, moduleReqStr) < 0) {
          requests.push(moduleReqStr);
        }
        moduleReqStr = request.request.replace(/\./g, "-");
        if (__indexOf.call(requests, moduleReqStr) < 0) {
          requests.push(moduleReqStr);
        }
        moduleReqStr = request.request.replace(/\./, "/");
        if (__indexOf.call(requests, moduleReqStr) < 0) {
          requests.push(moduleReqStr);
        }
        moduleReqStr = request.request.replace(/[\w-]+\./, "");
        if (__indexOf.call(requests, moduleReqStr) < 0) {
          requests.push(moduleReqStr);
        }
        requests.shift();
        return this.forEachBail(requests, (function(_this) {
          return function(moduleReqStr, callback) {
            var innerCallback, innerCallbackFn, innerRequest, moduleReq;
            moduleReq = _this.parse(moduleReqStr);
            innerRequest = {
              path: request.path,
              request: moduleReq.path,
              query: moduleReq.query,
              directory: moduleReq.directory
            };
            innerCallbackFn = function(err, result) {
              if (!err && result) {
                return callback(result);
              } else {
                return callback();
              }
            };
            innerCallback = createInnerCallback(innerCallbackFn, topLevelCallback, "aliased as angular module " + request.request + " -> " + innerRequest.request);
            return _this.doResolve("module", innerRequest, innerCallback, true);
          };
        })(this), function(result) {
          if (result) {
            return callback(null, result);
          } else {
            return callback();
          }
        });
      });
      return resolver.plugin("directory", function(request, callback) {
        var dirName, directory, fs, topLevelCallback;
        topLevelCallback = callback;
        fs = this.fileSystem;
        directory = this.join(request.path, request.request);
        dirName = directory.substr(directory.lastIndexOf('/') + 1);
        return fs.stat(directory, (function(_this) {
          return function(err, stat) {
            var files;
            if (err || !stat) {
              if (callback.log) {
                callback.log(directory + " doesn't exist (directory same name file)");
              }
              return callback();
            }
            if (!stat.isDirectory()) {
              if (callback.log) {
                callback.log(directory + " is not a directory (directory same name file)");
              }
              return callback();
            }
            files = ["" + dirName + ".module", dirName];
            return _this.forEachBail(files, function(fileName, callback) {
              var innerCallback, innerCallbackFn, innerRequest;
              innerRequest = {
                path: directory,
                request: fileName,
                query: request.query,
                directory: false
              };
              innerCallbackFn = function(err, result) {
                if (!err && result) {
                  return callback(result);
                } else {
                  return callback();
                }
              };
              innerCallback = createInnerCallback(innerCallbackFn, topLevelCallback, "directory default module file");
              return _this.doResolve("file", innerRequest, innerCallback, true);
            }, function(result) {
              if (result) {
                return callback(null, result);
              } else {
                return callback();
              }
            });
          };
        })(this));
      });
    };

    return AngularModuleResolverPlugin;

  })();

  module.exports = AngularModuleResolverPlugin;

}).call(this);
